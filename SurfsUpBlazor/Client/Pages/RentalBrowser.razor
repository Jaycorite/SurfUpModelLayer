@page "/rental"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using SurfsUpBlazor.Shared
@attribute [Authorize]
@inject HttpClient Http

@if (RentalPosts == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="container">
    <div class="row">
            @foreach (var rentalPost in RentalPosts)
            {
                <Card DisplayRentalPost="@rentalPost" Category="@rentalPost.Category" />
            }
        </div>
</div>
}

@code {
    // Template list for display
    // Load from database
    public List<RentalPost>? RentalPosts = new(){};
    public RentalPost? RentalPostsTest;

    // Is the uploaded image stored as a string
    string imgUrl = "/Images/placeholder.png";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            RentalPosts = await Http.GetFromJsonAsync<List<RentalPost>>("RentalPost");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        // Virker ikke
        //try
        //{
        //    RentalPostsTest = await Http.GetFromJsonAsync<RentalPost>("RentalPost/1");
        //}
        //catch (AccessTokenNotAvailableException exception)
        //{
        //    exception.Redirect();
        //}
    }



    /* To Do:
    * Make the Rental Post Creator look nicer / more intuitive
    * Create a simple txt file persistence system, for saving and loading Rental Posts
    * Fix the Image thing (Can't use csv file for the pictures since ByteArrays are not nice to save)
    * Load the posts for the RentalBrowser with Async like in FetchData
    * Add sorting functionality
    * Evt. features with login (low priority)
    */



    /* Done:
    * Create a card to use for displaying Rental Posts (when browsing)
    * Make dummy data for testing the RentalBrowser
    * Create the layout / grid for displaying the Rental Posts
    */
}
